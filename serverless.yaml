# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: logistics-service

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs12.x
  stage: staging
  region: ap-southeast-1
  stackTags:
    Project: 'logistics-service'

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:*Item"
        - "dynamodb:Scan"
        - "dynamodb:Query"
      Resource:
        - "arn:aws:dynamodb:ap-southeast-1:071958815836:table/logistics*"
    - Effect: "Allow"
      Action:
          - "S3:*"
      Resource:
          - "arn:aws:s3:::*logistics.com/*"
    - Effect: "Allow"
      Action:
          - "ses:SendEmail"
      Resource:
          - "arn:aws:ses:us-west-2:071958815836:identity/${self:custom.email}"
# you can define service wide environment variables here
  environment:
    apiArn: { "Fn::Join" : ["", ["arn:aws:execute-api:ap-southeast-1:071958815836:", { "Ref": "ApiGatewayRestApi" }, "/*"]] }
    stage: ${self:custom.stage}
    region: ${self:provider.region}
    # messagesTable: ${self:custom.tableNames.messagesTable}
    sessionsTable: ${self:custom.tableNames.sessionsTable}
    # mediaTable: ${self:custom.tableNames.mediaTable}
    email: ${self:custom.email}
custom:
  tableNames:
    # messagesTable: "logistics-messages-${self:custom.stage}"
    sessionsTable: "logistics-sessions"
    # mediaTable: "logistics-media-${self:custom.stage}"
  email: danielvtan@gmail.com
  stage: ${opt:stage, self:provider.stage}
# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  authorizer:
    handler: v1/authorizer/authorizer.handler
    type: "TOKEN"
    identitySource: method.request.header.Authorization
  users:
    handler: v1/users/users.handler
    events:
      - http:
          path: v1/users
          method: post
          integration: lambda
          cors: true
#   messages:
#     handler: v1/messages/handler.handler
#     events:
#       - http:
#           path: v1/messages
#           method: post
#           integration: lambda
#           cors: true
#       - http:
#           path: v1/messages/{id}
#           method: put
#           integration: lambda
#           cors: true
#       - http:
#           path: v1/messages/{id}/status
#           method: put
#           integration: lambda
#           authorizer: authorizer
#           cors: true
#           request:
#               parameters:
#                   headers:
#                     Authorization: true          
#       - http:
#           path: v1/messages/{id}
#           method: get
#           integration: lambda
#           cors: true
#       - http:
#           path: v1/messages
#           method: get
#           integration: lambda
#           cors: true
#   replies:
#     handler: v1/replies/handler.handler
#     events:
#       - http:
#           path: v1/replies/{message_id}
#           method: post
#           integration: lambda
#           cors: true
  # orders:
  #   handler: v1/orders/orders.handler
  #   events:
  #     - http:
  #         path: v1/orders
  #         method: post
  #         integration: lambda
  #         cors: true
  #     - http:
  #         path: v1/orders/{id}
  #         method: put
  #         integration: lambda
  #         cors: true
  #     - http:
  #         path: v1/orders/{id}/payment_status
  #         method: put
  #         integration: lambda
  #         authorizer: authorizer
  #         cors: true
  #         request:
  #             parameters:
  #                 headers:
  #                   Authorization: true
  #     - http:
  #         path: v1/orders/{id}
  #         method: get
  #         integration: lambda
  #         cors: true
  #     - http:
  #         path: v1/orders
  #         method: get
  #         integration: lambda
  #         cors: true
  # presigned:
  #   handler: v1/presigned/presigned.handler
  #   events:
  #     - http:
  #         path: v1/presigned
  #         method: get
  #         integration: lambda
  #         cors: true
  # products:
  #   handler: v1/products/products.handler
  #   events:
  #     - http:
  #         path: v1/products
  #         method: get
  #         integration: lambda
  #         cors: true
  #     - http:
  #         path: v1/products/{id}
  #         method: get
  #         integration: lambda
  #         cors: true
  #     - http:
  #         path: v1/products
  #         method: post
  #         integration: lambda
  #         cors: true
  # login:
  #   handler: v1/login/login.handler
  #   events:
  #       - http:
  #           path: v1/login
  #           method: post
  #           integration: lambda
  #           cors: true
  
  # promocode:
  #   handler: v1/promocode/promocode.handler
  #   events:
  #       - http:
  #           path: v1/promocode/{id}
  #           method: get
  #           integration: lambda
  #           cors: true          

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
